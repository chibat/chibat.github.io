<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tomofumi Chiba</title>
    <link>https://chibat.github.io/</link>
    <description>Recent content on Tomofumi Chiba</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://chibat.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go言語の学習がてら Healthcheck Notifier を作ってみた</title>
      <link>https://chibat.github.io/post/2017-11-02-golang/</link>
      <pubDate>Thu, 02 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://chibat.github.io/post/2017-11-02-golang/</guid>
      <description>以前から、Go言語(golang)をちょっとやってみたりしてたんですが、実用的なものを作ってみたいと思い、 Healthcheck Notifier というものを作ってみました。
一つソースファイルでできているとてもシンプルなものです。
Healthcheck Notifier
Webアプリケーションに対し、ヘルスチェックのリクエストを投げ、ステータスコード200以外が返答された場合、Alert を HipChat やメールで通知します。
クイックスタート リリースページからバイナリをダウンロードします。
Windows, macOS, Linux のバイナリがあります。
ダウンロードしたバイナリを以下のように実行するだけで起動します(Linuxの例)。
./healthcheck-notifier-linux-amd64  Webアプリとして起動するので、ヘルスチェックの状態を Webブラウザから確認できます。
以下のURLをWebブラウザで開いてみてください。
http://localhost:18888/
以下は、スクリーンショットです。
仕様  監視対象のアプリケーションがヘルスチェックエラーになるとHipChatの設定された Room に通知し、設定されたメールアドレスにメール送信します。連続してエラーになる場合、通知はしません。 ヘルスチェックエラー後、ヘルスチェック成功を確認するとHipChatの設定された Room に通知し、設定されたメールアドレスにメール送信します。  設定ファイル Healthcheck Notifier は、起動時に設定ファイルが存在しない場合、自分自身のアプリケーションを監視するような設定ファイルを例として作成します。この設定ファイルを書き換えます。
起動したディレクトリに以下のようなconfig.jsonが作成されていると思います。
{ &amp;quot;cron&amp;quot;: &amp;quot;*/10 * * * * *&amp;quot;, &amp;quot;port&amp;quot;: 18888, &amp;quot;hipchat-proxy&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;hipchat-subdomain&amp;quot;: &amp;quot;hipchat-subdomain&amp;quot;, &amp;quot;smtp-server&amp;quot;: &amp;quot;localhost:25&amp;quot;, &amp;quot;mail-address-from&amp;quot;: &amp;quot;from@example.com&amp;quot;, &amp;quot;apps&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;self&amp;quot;, &amp;quot;url&amp;quot;: &amp;quot;http://localhost:18888/&amp;quot;, &amp;quot;proxy&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;hipchat-room&amp;quot;: &amp;quot;1234567&amp;quot;, &amp;quot;hipchat-token&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;mail-address-to-down&amp;quot;: [&amp;quot;to1@example.</description>
    </item>
    
    <item>
      <title>Introducing Doma</title>
      <link>https://chibat.github.io/post/2017-08-15-introduction-doma/</link>
      <pubDate>Tue, 15 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://chibat.github.io/post/2017-08-15-introduction-doma/</guid>
      <description>Doma is a database access framework for Java.
 github Japanese document  Doma is so cool !
Doma has a Japanese document, but unfortunately there is no English document.
Therefore I introduce Doma in English.
Feature  Code generation and SQL file validation at compile time by Pluggable Annotation Processing API SQL template which is called &amp;ldquo;2-way SQL&amp;rdquo;. Usable only JRE. Don&amp;rsquo;t have dependencies.  Doma has many other features.</description>
    </item>
    
    <item>
      <title>Hello World!</title>
      <link>https://chibat.github.io/post/2017-08-02-hello-world/</link>
      <pubDate>Wed, 02 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://chibat.github.io/post/2017-08-02-hello-world/</guid>
      <description>Can I make a blog in GitHub ?
Check syntax highlight
public class Foo { public static void main(String [] args) { System.out.println(&amp;quot;Hello, World !&amp;quot;); } }  </description>
    </item>
    
  </channel>
</rss>